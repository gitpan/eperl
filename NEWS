
  Major Changes from ePerl Version 2.1.1 to 2.2.0
  ===============================================

  o  Changed Quotation/Delimiter Parsing

     Now again (as in 2.0.3) ePerl block end delimiters are found via plain
     forward character search. Quoted strings are no more recognized.  The
     reason behind this change is that constructs with odd number of quoting
     characters are more often seen in practice than end delimiters in quoted
     strings.  And it is easier to escape the end delimiter in quoted strings
     (e.g. via backslashes) than to rewrite a existing complex Perl construct
     with odd number of quotes (e.g. m|"[^"]+"|). 

     The advantage: A lot of scripts with complex Perl constructs (which never
     worked with ePerl in the past) now run out-of-the-box.  The disadvantage:
     Scripts which have the end delimiter in a quoted string are broken now.
     You have to escape it to fix your script.

     Additionally to be more flexible with some special delimiter variants
     like <script language="ePerl">..</script> a new option -i was added to
     ePerl to make the delimiters case-insensitive.

  o  Smarter and Optimized Parser

     Now ePerl recognizes final semicolons and automatically adds one if
     missing. So <: cmd; cmd :> now is also valid syntax. And the ePerl parser
     now strips off unnecessary whitespaces both at the begin and end of a
     block. This results now in much cleaner translated Perl scripts.
     Additionally the parser was slightly optimized by no longer producing
     ``print "";'' constructs. 

  o  Support for '=' block prefix
  
     Now <:= ... :> (assuming the default delimiters but works with any)
     automatically is converted to "<: print ...; :>".  Use this shortcut to
     interpolate a variable in a shorter way via <:=$variable:> instead of the
     long and annoying <: print $variable; :>. Very useful within CGI scripts
     to shorten the ePerl stuff, for instance
     <?=$ENV{SCRIPT_SRC_MODIFIED_ISOTIME}!>.

  o  Taint and Warning modes now available

     Now ePerl has two new options similar to the plain ``perl'' program:
     Option -T for enabling the Tainting mode and option -w for enabling
     Warning messages of the Perl interpreter. 

  o  New option -P for preprocessor

     ....????....

  o  New option -I for include

     ....????....

  o  New option -C

     HTML entity conversion....????

  o  New option -h ;-)

     Just to be consequent with options a -h option was added to show the
     usage list.

  o  New Perl 5 interface module for ePerl parser

     A new Perl 5 interface module named Parse::ePerl was created which makes
     the ePerl parser available from within Perl scripts itself via "use
     Parse::ePerl". This module can be compiled and installed directly from
     within the distribution via
        $ perl Makefile.PL
        $ make
        $ make install
     which is possible by a top-level pseudo-MakeMaker Makefile.PL which
     handles these typical steps, i.e. the ePerl distribution now is a hybrid
     distribution.

  o  New ePerl emulation handler for Apache+mod_perl: Apache::ePerl

     A new ePerl handler for Apache/mod_perl was written and put into a
     Apache::ePerl module. This replaces the Apache::ePerl from Mark Imbriaco
     and Hanno Mueller. The big difference between this one and Mark I.'s or
     Hanno M.'s versions are that that version makes use of the new
     Parse::ePerl module which itself incorporates the original ePerl parser.
     So this version is more compliant to the original ePerl facility and
     emulates it more strictly.

  o  Tested with new Perl 5.004

     ePerl runs fine with the new Perl 5.004. This is now the preferred and
     only supported version of Perl for compiling and running ePerl.

